#!/usr/bin/python3

#Axwrap is a simple wrapper script to allow people to run random software from 
# an AX.25 terminal.  You run axwrap out of ax25d.conf, like so:
# default * * * * * * - root /usr/local/bin/axwrap axwrap /bin/echo echo This is a test. 
# Christopher Smith (K0SIN), 2020

import sys
import time
import signal
import os
import termios
import threading
import tty
import pty
import argparse

#My system seems to get "message too long" errors after about 16 bytes 
#outbound at a time, so we double-buffer things and feed it out at that
#rate.  Probably some MTU-thing.  May need adjustment, so:
maxbuf = 14  #Flush output buffer to client when it gets this big

#Maximum time in seconds to hold output without sending it.  Higher is more 
#efficient, but interactivity will suffer after a point.
restime = .4

#Seconds to allow a session to remain idle.
sessiontime = 300


optParser = argparse.ArgumentParser(description="Wrap normal Unix binary for use over AX.25, translating CR->NL and NL->CR in transit.")
optParser.add_argument('-t','--timeout',dest='time',nargs='?',help='After this number of seconds with no input, a TERM signal is sent to the attached process and the remote system is disconnected.  Default is ' + str(sessiontime) + '.  0 means no timeout.')
optParser.add_argument('command',nargs='+',help='Command to execute.')
opts = optParser.parse_args()

if opts.time:
    sessiontime=int(opts.time)


eol = '\r'

#If we're attached to a terminal, get a clean copy of the termio settings,
#because we're going to be changing them around.`
#If we're not attached to a terminal, we just need garbage strings to pass
#to the function that checks to see.
masterterm = ''
termnoecho = ''
if sys.stdin.isatty():
    #We'll need to put these settings back later so that we don't mess up
    #somebody's terminal.`
    masterterm = termios.tcgetattr(sys.stdin.fileno())
    #If we just assign a new variable equal to masterterm, we won't get an
    #actual copy.  We want a second one with the echo disabled for the 
    #password prompt
    termnoecho = termios.tcgetattr(sys.stdin.fileno())
    termnoecho[3] &= ~(termios.ICANON|termios.ECHO|termios.ECHOCTL)

#Pythnon's print statement just won't let you not print a newline, so we can't
#use it to do anything.
def output(data):
    sys.stdout.write(data)

#We need to handle SIGINT by doing nothing
def ignoresig(signum,frame):
    pass
signal.signal(signal.SIGINT,ignoresig)

#Boot the user and exit.
def disconnect():
    output(eol + "Disconnecting.  Goodbye." + eol)
    termreset(masterterm)
    sys.exit(0)

#Reset the front-side terminal to more reasonable settings
def termreset(context,term=sys.stdin.fileno()):
    if (sys.stdin.isatty()):
        termios.tcsetattr(term,termios.TCSANOW,context)
        return True
    return False


#Fork with result attached to PTY
(proc,svctty) = pty.fork()

if proc:
    #This is the master process
    #Make our reads non-Blocking
    os.set_blocking(svctty,False)
    os.set_blocking(sys.stdin.fileno(),False)

    obuf = []
    ibuf = []
    iflushtime = time.time()
    oflushtime = time.time()
    inputtime = time.time()

    while (True):
        #Flush the output buffer.  This way we get efficient, reasonably large
        #packets going out.  We can't control the inbound ones, so just handle
        #that one byte at a time later on.  The OS will buffer those for us.`
        if ((time.time() > oflushtime+restime or len(obuf) >= maxbuf) and len(obuf) > 0):
            while len(obuf):    #Always flush in chunks of maxbuf, at most.
                os.write(sys.stdout.fileno(),b"".join(obuf[:maxbuf]))
                obuf = obuf[maxbuf:]
            oflushtime = time.time()   
        #Now handle input similarly
        if ((time.time() > iflushtime+restime or len(ibuf) >= maxbuf) and len(ibuf) > 0):
            while len(ibuf):
                os.write(svctty,b"".join(ibuf[:maxbuf]))
                ibuf = ibuf[maxbuf:]
            iflushtime = time.time()
        try:
            t=os.read(sys.stdin.fileno(),256)
        except BlockingIOError: #No data
            pass;
        except OSError: #Closed, probably; break from main loop
            output("Session closed on read from remote." + eol)
            break;
        else:
            #Record time of most recent user activity
            inputtime = time.time()
            #Translate CR->NL for the server
            t=t.replace(bytes([13]),bytes([10]))
            ibuf.append(t)
        try:
            t = os.read(svctty,maxbuf)
        except BlockingIOError:
            pass
        except OSError: #Closed, probably
            output("Session closed on read from service." + eol)
            break;
        else:
            t = t.replace(bytes([10]),bytes([13]))
            obuf.append(t)
        #Having taken care of all the I/O, should we time the user out?
        if (time.time() - inputtime > sessiontime):
            output("Timed out due to inactivity." + eol)
            os.kill(proc,signal.SIGTERM)
            disconnect()
else:
    tty.setraw(sys.stdin.fileno(),termios.TCSANOW)
    os.execl(*opts.command)
    sys.exit(0) #We should never hit this.

#Clean up terminal settings before exit.
termreset(masterterm)


